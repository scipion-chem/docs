.. _docs-chem:

.. |organization| replace:: scipion-chem
.. |repository| replace:: scipion-chem

.. figure:: ../../../_static/images/logo.png
  :alt: pwchem logo

###############################################################
scipion-chem
###############################################################
`scipion-chem <https://github.com/scipion-chem/scipion-chem>`_ is the core plugin for Virtual Drug Screening (VDS) in
the Scipion platform (the rest of scipion-chem-\* plugins). It is designed to manage and make interoperable all the the 
satellite plugins (Autodock, fpocket,...). It also includes several tools for:

- Managing small molecules, protein structures or molecular dynamics simulations.
- Consensus tools that extract the most relevant results from protein pocket search and docking.
- Visualization of the results for each of the VDS steps.
- Filter and operate the different sets obtained at each step of the workflow.

To do so, scipion-chem automatically installs several util third-party software for the management and visualization of the
tasks in a typical bioinformatics and VDS workflow. These include:

  - `OpenBabel <https://github.com/openbabel/openbabel>`_ and `RDKit <https://github.com/rdkit/rdkit>`_: the main small molecule handlers and converters.
  - `MGLTools <https://ccsb.scripps.edu/mgltools/>`_: utadditional utils for small molecules, docking, ... (includes `AutoDockTools <https://autodocksuite.scripps.edu/adt/>`_).
  - `JChemPaint <https://jchempaint.github.io/>`_: Java program to manually draw small molecules.
  - `Pymol <https://pymol.org/2/>`_: main viewer of Scipion Chem for small molecules and structures.
  - `VMD <https://www.ks.uiuc.edu/Research/vmd/>`_: secondary viewer of Scipion-Chem for structures and Molecular Dynamics.
  - `AliView <https://github.com/AliView/AliView>`_: main viewer for sequences.
  - `PLIP <https://github.com/pharmai/plip>`_: specialized viewer for docking interactions in `Pymol <https://pymol.org/2/>`_.

These programs are managed through conda environments, which also includes different util Python modules.

==========================================
Installation
==========================================
A) Requirements
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. include:: ../../templates/plugins/installation/scipion3-requirement.rst

B) Installation steps
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. include:: ../../templates/plugins/installation/installation-steps.rst
.. include:: ../../templates/plugins/installation/only-devel.rst

C) Packages & enviroments
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. include:: ../../templates/plugins/installation/packages-header.rst

- rdkit-``version``
- shape-it-``version``
- mgltools-``version``
- jchempaint-``version``
- pymol-``version``
- aliview-``version``
- vmd-``version``
- mdtraj-``version``

.. include:: ../../templates/plugins/installation/packages-footer.rst

**TODO: COMPLETE THIS PART**

The code inside this plugin also includes the python objects, viewers, wizards and other
utils for the rest of the scipion-chem plugins. We give these python objects special importance since the
interoperability of scipion-chem relies on them.

==========================================
Protocols
==========================================
scipion-chem includes around 40 different protocols subdivided in 4 groups of protocols according to their function:

.. note::
   The user will notice that many protocols have a wand icon next to some of the parameters. 
   We call this button ``wizard`` and they are designed to help the user to use the protocol.
   
   One of the most common types of wizard will help the user to fill a parameter with the proper string.
   
   We strongly recommend to use the wizards to fill these parameters (for some protocols, it is even compulsory), 
   since inappropriate use of the parameters might lead the protocol to fail.

A) General
~~~~~~~~~~~~~~~~~~~~~~~~~~~
It includes protocols for managing the objects or files generated by Scipion.

- `Convert structure <protocols/general/convert-structure>`_: Converts the format of the files stored for a set of Small Molecules, an Atom Structure or a Molecular dynamics system.
- `Operate set <protocols/general/operate-set>`_: Includes several functionalities to modify any Scipion Set inside the project.
- `Add attribute <protocols/general/add-attribute>`_: Allows the user to add an attribute to an item or set object inside Scipion.
- `Export CSV <protocols/general/export-csv>`_: Allows the user to export the SQLite table of a set as a CSV file, containing the values of each attribute for each column and each item in a row.

B) Database
~~~~~~~~~~~~~~~~~~~~~~~~~~~
It includes protocols related to the main databases for protein sequences, structures or small molecules.

- `Import database IDs <protocols/database/import-database-ids>`_: Imports a set of database IDs from a file and stores them as a Scipion object.
- `Identify ligands <protocols/database/identify-ligands>`_: Tries to identify a set of Small Molecules based on the `SMILES <https://es.wikipedia.org/wiki/SMILES>`_ string for each of them.
- `UniProt CrossRef <protocols/database/uniprot-crossref>`_: Searches in the `UniProt <https://www.uniprot.org/>`_ cross reference database for related entries of a set of UniProt IDs for specified databases.
- `ZINC filter <protocols/database/zinc-filter>`_: Filters a ``SetOfSmallMolecules`` by the presence/absence of each of the molecules in the specified ZINC subset(s).
- `Fetch ligands <protocols/database/fetch-ligands>`_: Extracts the ligands related to a ``SetOfDatabaseIDs``.

C) Sequence
~~~~~~~~~~~~~~~~~~~~~~~~~~~
It incorporates protocols for managing biological sequences, including tools for defining sequence regions of interest.

- `Import set of sequences <protocols/sequence/import-set-of-sequences>`_: Imports a set of sequences from one or several fasta files or from a database like `UniProt <https://www.uniprot.org/>`_ using a ``SetOfDatabaseIDs`` as input.
- `Pairwise Alignment <protocols/sequence/pairwise-alignment>`_: Performs a pairwise alignment using clustal omega over two input sequences.
- `Multiple Sequence Alignment <protocols/sequence/multiple-sequence-alignment>`_: Performs a multiple sequence alignment (MSA) over a set of input sequences.
- `Define set of sequences <protocols/sequence/define-set-of-sequences>`_: Allows the user to manually build a set of small molecules from individual elements.
- `Import variants <protocols/sequence/import-variants>`_: Imports a set of sequence variants.
- `Generate variant sequences <protocols/sequence/generate-variant-sequences>`_: Generates a set of sequences from a list of specified variants from a ``SequenceVariants`` object.
- `Import Sequence ROIs <protocols/sequence/import-sequence-rois>`_: Imports a ``SetOfSequenceROIs``, meaning a set of Regions Of Interest (ROI) in a sequence.
- `Define Sequence ROIs <protocols/sequence/define-sequence-rois>`_: Defines a ``SetOfSequenceROIs`` from a ``Sequence`` or ``SequenceVariants`` object.
- `Operate Sequence ROIs <protocols/sequence/operate-sequence-rois>`_: Allows the user to operate sets of sequence ROIs, similarly to the operate sets.
- `Extract Sequence ROIs <protocols/sequence/extract-sequence-rois>`_: Defines a ``SetOfSequenceROIs`` from an input set of sequences based on the conservation of each position in the alignment.
- `Map Sequence ROIs <protocols/sequence/map-sequence-rois>`_: Maps a set of sequence ROIs to an atomic structure where the sequence can be mapped.

D) Virtual Drug Screening
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Main group of protocols that incorporates most of the functionalities related to the VDS workflow.

- `Import Small Molecules <protocols/virtual-drug-screening/import-small-molecules>`_: Imports a set of small molecules from one or several files or from default database libraries like `ECBL <https://www.eu-openscreen.eu/services/compound-collection/european-chemical-biology-library-ecbl-diversity-library.html>`_ or `ZINC <https://zinc.docking.org/>`_.
- `Extract Small Molecules <protocols/virtual-drug-screening/extract-small-molecules>`_: Extract the small molecules present in a ``AtomStruct`` object.
- `Draw Small Molecules <protocols/virtual-drug-screening/draw-small-molecules>`_: Runs `JChemPaint <https://jchempaint.github.io/>`_ java program and allows the user to draw their own molecules.
- `OpenBabel Prepare Small Molecules <protocols/virtual-drug-screening/openbabel-prepare-small-molecules>`_: Prepares a ``SetOfSmallMolecules`` using `OpenBabel <https://github.com/openbabel/openbabel>`_.
- `RDKit Prepare Small Molecules <protocols/virtual-drug-screening/rdkit-prepare-small-molecules>`_: Prepares a ``SetOfSmallMolecules`` using `RDKit <https://github.com/rdkit/rdkit>`_.
- `Prepare Receptor <protocols/virtual-drug-screening/prepare-receptor>`_: Provides a simple ``AtomStruct`` preparation with `BioPython <https://biopython.org/>`_ where the user can choose different cleaning options like removing waters, heteroatoms, keep only specific chains...
- `ADME Small Molecules filter <protocols/virtual-drug-screening/adme-small-molecules-filter>`_: uses `RDKit <https://github.com/rdkit/rdkit>`_ to filter a ``SetOfSmallMolecules`` by applying the `ADME (Absortion, Distribution, Metabolism, Excretion) filter <https://en.wikipedia.org/wiki/ADME>`_ to each of the small molecules stored.
- `PAINS Small Molecules filter <protocols/virtual-drug-screening/pains-small-molecules-filter>`_: Uses `RDKit <https://github.com/rdkit/rdkit>`_ to filter a ``SetOfSmallMolecules`` by applying the `PAINS (Pan-assay interference compounds) filter <https://en.wikipedia.org/wiki/Pan-assay_interference_compounds>`_ to each of the small molecules stored.
- `Shape Small Molecules filter <protocols/virtual-drug-screening/shape-small-molecules-filter>`_: Uses `RDKit <https://github.com/rdkit/rdkit>`_ to filter a ``SetOfSmallMolecules`` by applying shape filters to each of the small molecules stored.
- `FingerPrint Small Molecules filter <protocols/virtual-drug-screening/fingerprint-small-molecules-filter>`_: Uses `RDKit <https://github.com/rdkit/rdkit>`_ to filter a ``SetOfSmallMolecules`` by applying fingerprint filters to each of the small molecules stored.
- `Pharmacophore generation <protocols/virtual-drug-screening/pharmacophore-generation>`_: Generate a ``Pharmacophore`` object that can be parse by `RDKit <https://github.com/rdkit/rdkit>`_ from a ``SetOfSmallMolecules``.
- `Pharmacophore modification <protocols/virtual-drug-screening/pharmacophore-modification>`_: Modifies the properties of the features inside a ``Pharmacophore`` object.
- `Pharmacophore filtering <protocols/virtual-drug-screening/pharmacophore-filtering>`_: Uses `RDKit <https://github.com/rdkit/rdkit>`_ for filtering a ``SetOfSmallMolecules`` by matching them with a ``Pharmacophore``.
- `Define Structural ROIs <protocols/virtual-drug-screening/define-structural-rois>`_: Allows the user to manually define a ``SetOfStructROIs`` from ``AtomStruct`` objects.
- `Consensus Structural ROIs <protocols/virtual-drug-screening/consensus-structural-rois>`_: Performs a consensus operation over several ``SetOfStructROIs``, studying which of them are shared among all or a subset of the input sets.
- `Score docking positions <protocols/virtual-drug-screening/score-docking-positions>`_: Allows the user to rescore a ``SetOfSmallMolecules`` docked to a receptor using several `ODDT <https://github.com/oddt/oddt>`_ scoring functions.
- `RMSD docking <protocols/virtual-drug-screening/rmsd-docking>`_: Allows the user to calculate the RMSD between a ``SetOfSmallMolecules`` to a reference molecule docked to the same receptor.
- `Consensus docking <protocols/virtual-drug-screening/consensus-docking>`_: Performs a consensus operation over several docked ``SetOfSmallMolecules``, studying which positions are shared among all or a subset of the input sets.
- `SASA calculation <protocols/virtual-drug-screening/sasa-calculation>`_: Uses `BioPython <https://biopython.org/>`_ to calculate the `SASA <https://en.wikipedia.org/wiki/Accessible_surface_area>`_ (Solvent-Accessible Surface Area) for each residue in an ``AtomStruct``.
